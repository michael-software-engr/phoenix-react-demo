{"version":3,"sources":["components/Route.js","lib.js","components/GroupList.js","components/Task.js","components/Group.js","components/Container.js","state/elixir.js","App.js","index.js"],"names":["Route","_ref","currentPath","path","children","propTypes","PropTypes","string","isRequired","node","liGridItemNameCName","GroupList","groups","linkClickHandler","react_default","a","createElement","key","className","map","group","tasks","xOfTasksComplete","filter","task","completedAt","length","groupPath","concat","id","href","onClick","event","src","process","join","alt","name","Task","_ref3","_ref3$task","dependencyIds","allTasks","toggleTaskHandler","find","depId","_ref2","Error","isLockedTask","Group","_ref$group","components_Task","Container","state","validPaths","Object","toConsumableArray","includes","components_Route","components_GroupList","components_Group","camelizeKeys","obj","keys","reduce","acc","words","split","camelized","slice","word","toUpperCase","objectSpread","defineProperty","buildGroups","groupsByKey","toLowerCase","replace","RegExp","taskGroupId","sort","b","toggleTask","idToToggle","newAllTasks","Date","fetchInitialState","fetch","then","response","json","groupsRawData","data","dependency_ids","task_group_id","flat","App","preventDefault","_this","setState","prevState","window","history","pushState","_this2","this","location","pathname","console","log","components_Container","Component","ReactDOM","render","App_App","document","getElementById"],"mappings":"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","file":"static/js/main.35231970.chunk.js","sourcesContent":["// import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Route = ({ currentPath, path, children }) => (\n  currentPath === path ? children : null\n)\n\nRoute.propTypes = {\n  currentPath: PropTypes.string.isRequired,\n  path: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired\n}\n\nexport default Route;\n","export const liGridCName = 'list-item-grid'\nexport const liGridItemNameCName = 'list-item-name'\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport { liGridCName, liGridItemNameCName } from '../lib'\n\nconst GroupList = ({ groups, linkClickHandler }) => [\n  <h2 key=\"title\" className=\"page-title\">Things To Do</h2>,\n  <hr key=\"divider\" />,\n\n  <section key=\"group-list-actual\" className=\"group-list-actual\">\n    {\n      groups.map(group => {\n        const { tasks } = group;\n        const xOfTasksComplete = tasks.filter(task => task.completedAt).length\n\n        const groupPath = `/groups/${group.id}`;\n\n        return (\n          <article key={group.key}>\n            <a\n              href={groupPath}\n              onClick={(event) => { linkClickHandler(groupPath, event) }}\n              className={liGridCName}\n            >\n              <div>\n                <img\n                  src={[process.env.PUBLIC_URL, '/group.svg'].join('')}\n                  alt=\"Group\"\n                />\n              </div>\n              <div>\n                <div className={liGridItemNameCName}>{group.name}</div>\n                <div className=\"progress\">{xOfTasksComplete} OF {tasks.length} TASKS COMPLETE</div>\n              </div>\n            </a>\n            <hr />\n          </article>\n        )\n      })\n    }\n  </section>\n]\n\nGroupList.propTypes = {\n  groups: PropTypes.arrayOf(PropTypes.shape()).isRequired,\n  linkClickHandler: PropTypes.func.isRequired\n}\n\nexport default GroupList;\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport { liGridCName, liGridItemNameCName } from '../lib'\n\nconst isLockedTask = ({ dependencyIds, allTasks }) => (\n  dependencyIds.find((depId) => {\n    const task = allTasks.find(({ id }) => depId === id)\n\n    if (!task) throw Error(`Task id '${depId}' not found.`)\n\n    return !task.completedAt;\n  })\n)\n\nconst Task = ({\n  task: { id, task, completedAt, dependencyIds },\n  allTasks,\n  toggleTaskHandler\n}) => (\n  <article>\n    {\n      isLockedTask({ dependencyIds, allTasks }) ? (\n        <div className={liGridCName}>\n          <img\n            src={[process.env.PUBLIC_URL, '/locked.svg'].join('')}\n            alt=\"Locked\"\n          />\n          <span className={liGridItemNameCName}>Locked Task</span>\n        </div>\n      ) : (\n        <div\n          onClick={(event) => { toggleTaskHandler(id, event); }}\n          className={liGridCName}\n        >\n          {\n            completedAt ? (\n              <img src={[process.env.PUBLIC_URL, '/completed.svg'].join('')} alt=\"Complete\" />\n            ) : <img src={[process.env.PUBLIC_URL, '/incomplete.svg'].join('')} alt=\"Incomplete\" />\n          }\n\n          <span\n            className={[liGridItemNameCName, completedAt ? 'line-through' : ''].join(' ')}\n          >\n            {task}\n          </span>\n        </div>\n      )\n    }\n    <hr />\n  </article>\n)\n\nTask.propTypes = {\n  task: PropTypes.shape().isRequired,\n  allTasks: PropTypes.arrayOf(PropTypes.shape()).isRequired,\n  toggleTaskHandler: PropTypes.func.isRequired\n}\n\nexport default Task;\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport Task from './Task';\n\nconst Group = ({ group: { name, tasks }, linkClickHandler, toggleTaskHandler, allTasks }) => (\n  <div>\n    <div className=\"page-title-row\">\n      <h2 className=\"page-title debug\">{name}</h2>\n\n      <a href=\"/\" onClick={(event) => { linkClickHandler('/', event) }} className=\"nav-all-groups debug\">\n        ALL GROUPS\n      </a>\n    </div>\n\n    <hr />\n\n    {\n      tasks.map(task => (\n        <Task\n          task={task}\n          allTasks={allTasks}\n          toggleTaskHandler={toggleTaskHandler}\n          key={task.id}\n        />\n      ))\n    }\n  </div>\n)\n\nGroup.propTypes = {\n  group: PropTypes.shape().isRequired,\n  linkClickHandler: PropTypes.func.isRequired,\n  toggleTaskHandler: PropTypes.func.isRequired,\n  allTasks: PropTypes.arrayOf(PropTypes.shape()).isRequired\n}\n\nexport default Group;\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport Route from './Route';\nimport GroupList from './GroupList';\nimport Group from './Group';\n\nimport '../App.css'\n\nconst Container = ({ state, linkClickHandler, toggleTaskHandler }) => {\n  if (!state) return <div>Loading....</div>;\n\n  const { currentPath, groups } = state;\n\n  const validPaths = ['/', ...groups.map(({ id }) => `/groups/${id}`)]\n\n  return (\n    <main>\n      <div />\n\n      <div>\n        {\n          validPaths.includes(currentPath) ? [\n            <Route currentPath={currentPath} path=\"/\" key=\"/\">\n              <GroupList groups={state.groups} linkClickHandler={linkClickHandler} />\n            </Route>,\n\n            ...groups.map((group) => {\n              const { id } = group\n              return (\n                <Route currentPath={currentPath} path={`/groups/${id}`} key={`group-${id}`}>\n                  <Group\n                    group={group}\n                    toggleTaskHandler={toggleTaskHandler}\n                    allTasks={state.allTasks}\n                    linkClickHandler={linkClickHandler}\n                  />\n                </Route>\n              )\n            })\n          ] : (\n            <div>ERROR: invalid route</div>\n          )\n        }\n      </div>\n\n      <div />\n    </main>\n  )\n}\n\nContainer.propTypes = {\n  state: PropTypes.shape().isRequired,\n  linkClickHandler: PropTypes.func.isRequired,\n  toggleTaskHandler: PropTypes.func.isRequired\n}\n\nexport default Container;\n","const camelizeKeys = obj => Object.keys(obj).reduce((acc, key) => {\n  const words = key.split('_')\n  const camelized = [\n    words[0],\n    ...words.slice(1).map(word => [word[0].toUpperCase(), ...word.slice(1)].join(''))\n  ].join('')\n\n  return {\n    ...acc,\n    [camelized]: obj[key]\n  }\n}, {})\n\nconst buildTasks = (tasks, groups) => tasks.map(task => ({\n  ...camelizeKeys(task),\n  dependencyIds: task.dependency_ids ? task.dependency_ids : [],\n  group: groups.find(({ id }) => id === task.task_group_id).name\n}))\n\nconst fetchInitialState = () => (\n  fetch('/api/task_groups').then(\n    response => response.json().then(\n      (json) => {\n        const groupsRawData = json.data\n        const groups = groupsRawData.map(group => ({\n          ...camelizeKeys(group),\n          key: group.name.toLowerCase().replace(new RegExp(' ', 'g'), '-'),\n          tasks: buildTasks(group.tasks, groupsRawData)\n        }))\n\n        const allTasks = groups.map(group => group.tasks).flat()\n\n        return { groups, allTasks }\n      }\n    )\n  )\n)\n\nconst buildGroups = (tasks) => {\n  const groupsByKey = tasks.reduce((acc, task) => {\n    const name = task.group;\n    const key = name.toLowerCase().replace(new RegExp(' ', 'g'), '-')\n    const group = acc[key]\n    const tasks = group && group.tasks\n\n    return {\n      ...acc,\n      [key]: {\n        id: task.taskGroupId,\n        name,\n        tasks: [...(tasks ? tasks : []), task]\n      }\n    }\n  }, {})\n\n  return Object.keys(groupsByKey)\n               .map(key => ({ ...groupsByKey[key], key }))\n               .sort((a, b) => a.id - b.id)\n}\n\nexport const toggleTask = (idToToggle, allTasks) => {\n  const newAllTasks = allTasks.map((task) => {\n    if (idToToggle !== task.id) return task;\n\n    const { completedAt } = task\n\n    if (completedAt) return { ...task, completedAt: null }\n\n    return { ...task, completedAt: new Date() }\n  });\n\n  return { allTasks: newAllTasks, groups: buildGroups(newAllTasks) }\n}\n\nexport default fetchInitialState\n","import React, { Component } from 'react'\n\nimport Container from './components/Container';\n\n// import fetchInitialState, { toggleTask } from './state/index'\nimport fetchInitialState, { toggleTask } from './state/elixir'\n\nexport default class App extends Component {\n  componentDidMount() {\n    fetchInitialState().then((data) => {\n      this.setState({\n        ...data,\n        currentPath: window.location.pathname.replace(/\\/coding_challenge\\/index\\.html/, '') || '/'\n      })\n      // this.setState({ ...data, currentPath: window.location.pathname || '/' })\n    })\n  }\n\n  toggleTaskHandler = (id, event) => {\n    event.preventDefault()\n\n    this.setState((prevState) => ({ ...prevState, ...toggleTask(id, prevState.allTasks) }))\n  }\n\n  linkClickHandler = (currentPath, event) => {\n    event.preventDefault()\n    this.setState({ currentPath })\n    window.history.pushState(\n      {},\n      'title - Firefox currently ignores this parameter, although it may use it in the future.',\n      currentPath\n    );\n  }\n\n  render() {\n    if (!this.state) return <div>Loading....</div>;\n\n    console.log({ state: this.state, path: window.location.pathname })\n\n    return (\n      <Container\n        state={this.state}\n        linkClickHandler={this.linkClickHandler}\n        toggleTaskHandler={this.toggleTaskHandler}\n      />\n    )\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}