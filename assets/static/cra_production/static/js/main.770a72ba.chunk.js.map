{"version":3,"sources":["components/Todo.js","components/NewTodoInput.js","redux/modules/todoDemo/actions/types.js","components/App.js","redux/modules/todoDemo/actions/index.js","serviceWorker.js","redux/modules/todoDemo/reducers/index.js","redux/rootReducer.js","index.js"],"names":["Todo","_ref","todos","toggleDoneHandler","removeItemHandler","dateFields","react_default","a","createElement","map","_ref2","ix","id","key","done","todo","Object","objectWithoutProperties","className","title","type","onClick","event","concat","field","dateObjOrStr","value","text","includes","Date","toLocaleDateString","weekday","year","month","day","NewTodoInput","addTodoHandler","newTodoTextChangeHandler","newTodo","onSubmit","onChange","placeholder","size","style","display","defaultProps","TODO_DEMO_LOAD_TODOS","TODO_DEMO_TOGGLE_DONE","TODO_DEMO_REMOVE_TODO","TODO_DEMO_ADD_TODO","defaultDueDate","now","getFullYear","getMonth","getDate","getDateDone","isDone","toISOString","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","idToBeToggled","preventDefault","todoToBeUpdated","todoDemo","find","Error","newDone","updatedTodo","objectSpread","dateDone","fetch","method","headers","Content-Type","body","JSON","stringify","humps","decamelizeKeys","then","response","json","toggleDone","idToBeRemoved","ok","statusText","console","error","removeItem","state","dateDue","addTodo","camelizeKeys","data","setState","target","_this2","loadTodos","length","components_NewTodoInput","components_Todo","React","Component","connect","_ref3","payload","Boolean","window","location","hostname","match","buildKey","join","rootReducer","combineReducers","arguments","undefined","action","toString","trim","entries","constructor","filter","store","createStore","ReactDOM","render","es","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.770a72ba.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst dateFormatter = (dateObjOrStr) => {\n  if (!dateObjOrStr) return '';\n\n  const date = typeof dateObjOrStr === 'string' ? new Date(dateObjOrStr) : dateObjOrStr;\n\n  return date.toLocaleDateString('en-US', {\n    weekday: 'short',\n    year: 'numeric',\n    month: '2-digit',\n    day: '2-digit'\n  });\n};\n\nconst Todo = ({\n  todos,\n  toggleDoneHandler,\n  removeItemHandler\n}) => {\n  const dateFields = ['dateDue', 'dateDone'];\n\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th>Toggle</th>\n          <th>To do</th>\n          <th>Due</th>\n          <th>Done</th>\n          <th>Remove</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {\n          todos.map(({\n            id, key, done, ...todo\n          }, ix) => (\n            <tr\n              key={key}\n              className={done ? 'strikeout' : ''}\n            >\n              <td title=\"Click to mark as done\">\n                <button type=\"button\" onClick={(event) => { toggleDoneHandler(id, event); }}>\n                  {ix + 1}\n                </button>\n              </td>\n              {\n                ['title'].concat(dateFields).map((field) => {\n                  const value = todo[field];\n                  const text = dateFields.includes(field) ? dateFormatter(value) : value;\n\n                  return <td key={field}>{text}</td>;\n                })\n              }\n              <td>\n                <button type=\"button\" onClick={(event) => { removeItemHandler(id, event); }}>x</button>\n              </td>\n            </tr>\n          ))\n        }\n      </tbody>\n    </table>\n  );\n};\n\nTodo.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape()).isRequired,\n  toggleDoneHandler: PropTypes.func.isRequired,\n  removeItemHandler: PropTypes.func.isRequired\n};\n\nexport default Todo;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst NewTodoInput = ({ addTodoHandler, newTodoTextChangeHandler, newTodo }) => (\n  <form onSubmit={addTodoHandler}>\n    <input\n      type=\"text\"\n      onChange={newTodoTextChangeHandler}\n      value={newTodo}\n      placeholder={'Enter new todo (press \"Enter\" to submit)'}\n      size={40}\n    />\n\n    <input type=\"submit\" style={{ display: 'none' }} />\n  </form>\n);\n\nNewTodoInput.propTypes = {\n  addTodoHandler: PropTypes.func.isRequired,\n  newTodoTextChangeHandler: PropTypes.func.isRequired,\n  newTodo: PropTypes.string\n};\n\nNewTodoInput.defaultProps = {\n  newTodo: ''\n};\n\nexport default NewTodoInput;\n","\nexport const TODO_DEMO_LOAD_TODOS = 'TODO_DEMO/LOAD_TODOS';\nexport const TODO_DEMO_TOGGLE_DONE = 'TODO_DEMO/TOGGLE_DONE';\nexport const TODO_DEMO_REMOVE_TODO = 'TODO_DEMO/REMOVE_TODO';\nexport const TODO_DEMO_ADD_TODO = 'TODO_DEMO/ADD_TODO';\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport fetch from 'cross-fetch';\nimport humps from 'humps';\n\nimport Todo from './Todo';\nimport NewTodoInput from './NewTodoInput';\n\nimport {\n  unconnectedLoadTodos,\n  unconnectedToggleDone,\n  unconnectedAddTodo,\n  unconnectedRemoveTodo\n} from '../redux/modules/todoDemo/actions/index';\n\nconst defaultDueDate = () => {\n  const now = new Date();\n  return new Date(now.getFullYear(), now.getMonth() + 1, now.getDate());\n};\n\nconst getDateDone = ({ isDone }) => {\n  if (isDone) return (new Date()).toISOString();\n\n  return null;\n};\nclass App extends React.Component {\n  static propTypes = {\n    todoDemo: PropTypes.shape().isRequired,\n    loadTodos: PropTypes.func.isRequired,\n    toggleDone: PropTypes.func.isRequired,\n    addTodo: PropTypes.func.isRequired,\n    removeItem: PropTypes.func.isRequired\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.state = { newTodo: '' };\n  }\n\n  componentDidMount() {\n    fetch('/api/todos').then(response => response.json().then((json) => {\n      this.props.loadTodos(humps.camelizeKeys(json).data);\n    }));\n  }\n\n  toggleDoneHandler = (idToBeToggled, event) => {\n    event.preventDefault();\n\n    const todoToBeUpdated = this.props.todoDemo.todos.find(({ id }) => idToBeToggled === id);\n\n    if (!todoToBeUpdated) throw Error(`Can't find id ${idToBeToggled}`);\n\n    const newDone = !todoToBeUpdated.done;\n\n    const updatedTodo = {\n      ...todoToBeUpdated,\n      done: newDone,\n      dateDone: getDateDone({ isDone: newDone })\n    };\n\n    fetch(`/api/todos/${idToBeToggled}`, {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(humps.decamelizeKeys({ id: idToBeToggled, todo: updatedTodo }))\n    }).then(response => response.json().then(() => {\n      // TODO: catch errors... if (json.errors)...\n      this.props.toggleDone(updatedTodo);\n    }));\n  }\n\n  removeItemHandler = (idToBeRemoved, event) => {\n    event.preventDefault();\n    fetch(`/api/todos/${idToBeRemoved}`, {\n      method: 'DELETE',\n      headers: { 'Content-Type': 'application/json' }\n    }).then((response) => {\n      if (!response.ok && response.statusText !== 'No content') {\n        console.error({ error: 'Unexpected response...', response });\n        throw Error('...');\n      }\n\n      this.props.removeItem(idToBeRemoved);\n    });\n  }\n\n  addTodoHandler = (event) => {\n    event.preventDefault();\n\n    const newTodo = { title: this.state.newTodo, dateDue: defaultDueDate().toISOString() };\n\n    fetch('/api/todos', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(humps.decamelizeKeys({ todo: newTodo }))\n    }).then(response => response.json().then((json) => {\n      // TODO: catch errors... if (json.errors)...\n      this.props.addTodo(humps.camelizeKeys(json.data));\n      this.setState({ newTodo: '' });\n    }));\n  }\n\n  newTodoTextChangeHandler = (event) => {\n    event.preventDefault();\n    const { value } = event.target;\n\n    if (!value) return;\n\n    this.setState({ newTodo: value });\n  }\n\n  render() {\n    const { todos } = this.props.todoDemo;\n\n    if (todos.length === 0) return <div>Loading...</div>;\n\n    return (\n      <main>\n        <h3>C.R.A. Production</h3>\n        <NewTodoInput\n          addTodoHandler={this.addTodoHandler}\n          newTodoTextChangeHandler={this.newTodoTextChangeHandler}\n          newTodo={this.state.newTodo}\n        />\n        <Todo\n          todos={this.props.todoDemo.todos}\n          toggleDoneHandler={this.toggleDoneHandler}\n          removeItemHandler={this.removeItemHandler}\n        />\n      </main>\n    );\n  }\n}\n\nconst mapStateToProps = ({ todoDemo }) => ({ todoDemo });\n\nexport default connect(\n  mapStateToProps,\n  {\n    loadTodos: unconnectedLoadTodos,\n    toggleDone: unconnectedToggleDone,\n    addTodo: unconnectedAddTodo,\n    removeItem: unconnectedRemoveTodo\n  }\n)(App);\n","import {\n  TODO_DEMO_LOAD_TODOS,\n  TODO_DEMO_TOGGLE_DONE,\n  TODO_DEMO_ADD_TODO,\n  TODO_DEMO_REMOVE_TODO\n} from './types';\n\nexport function unconnectedLoadTodos(todos) {\n  return { type: TODO_DEMO_LOAD_TODOS, payload: todos };\n}\n\nexport function unconnectedToggleDone(updatedTodo) {\n  return { type: TODO_DEMO_TOGGLE_DONE, payload: updatedTodo };\n}\n\nexport function unconnectedAddTodo(todo) {\n  return { type: TODO_DEMO_ADD_TODO, payload: todo };\n}\n\nexport function unconnectedRemoveTodo(idToBeRemoved) {\n  return { type: TODO_DEMO_REMOVE_TODO, payload: idToBeRemoved };\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  TODO_DEMO_LOAD_TODOS,\n  TODO_DEMO_TOGGLE_DONE,\n  TODO_DEMO_ADD_TODO,\n  TODO_DEMO_REMOVE_TODO\n} from '../actions/types';\n\nconst buildKey = id => ['todo-key-', id].join('');\n\nexport default function reducer(state = { todos: [], newTodo: '' }, action) {\n  const { type, payload } = action;\n\n  switch (type) {\n    case TODO_DEMO_LOAD_TODOS: {\n      const todos = payload;\n      return {\n        ...state,\n        todos: todos.map(({\n          id, dateDue, dateDone, ...todo\n        }) => ({\n          ...todo,\n          id,\n          key: buildKey(id),\n          dateDue: new Date(dateDue),\n          dateDone: dateDone && new Date(dateDone)\n        }))\n      };\n    }\n\n    case TODO_DEMO_TOGGLE_DONE: {\n      const updatedTodo = payload;\n\n      return {\n        ...state,\n        todos: state.todos.map(({ id, ...todo }) => (\n          updatedTodo.id === id ? updatedTodo : { ...todo, id }\n        ))\n      };\n    }\n\n    case TODO_DEMO_ADD_TODO: {\n      const todo = payload;\n      if (!todo.toString().trim()) return state;\n\n      if (Object.entries(todo).length === 0 && todo.constructor === Object) return state;\n\n      return {\n        ...state,\n        todos: state.todos.concat([{\n          ...todo,\n          key: buildKey(todo.id)\n        }])\n      };\n    }\n\n    case TODO_DEMO_REMOVE_TODO: {\n      const idToBeRemoved = payload;\n      return {\n        ...state,\n        todos: state.todos.filter(({ id }) => idToBeRemoved !== id)\n      };\n    }\n\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\n\nimport todoDemoReducer from './modules/todoDemo/reducers/index';\n\nconst rootReducer = combineReducers({\n  todoDemo: todoDemoReducer\n});\n\nexport default rootReducer;\n","import 'core-js';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport rootReducer from './redux/rootReducer';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <Provider store={store}><App /></Provider>,\n  document.getElementById('app')\n);\n\n// ReactDOM.render(<App />, document.getElementById('app'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}